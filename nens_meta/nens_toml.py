"""Purpose: read and manage the .nens.toml config file
"""
import logging
from pathlib import Path

import tomlkit

from nens_meta import utils

META_FILENAME = ".nens.toml"


logger = logging.getLogger(__name__)


def nens_toml_file(project: Path) -> Path:
    return project / META_FILENAME


def create_if_missing(project: Path):
    assert not nens_toml_file(project).exists()
    nens_toml_file(project).write_text("# Initially generated by nens-meta\n")


class OurConfig:
    """Wrapper around a project's .nens.toml

    See https://tomlkit.readthedocs.io/en/latest/quickstart/
    """

    _config_file: Path
    _contents: tomlkit.TOMLDocument

    def __init__(self, project: Path):
        self._config_file = nens_toml_file(project)
        self._contents = self.read()

    def read(self) -> tomlkit.TOMLDocument:
        return tomlkit.parse(self._config_file.read_text())

    def write(self):
        utils.write_if_changed(self._config_file, tomlkit.dumps(self._contents))

    def section_options(self, section) -> dict:
        """Return all options configured in a given section

        Later on: perhaps do some filtering on known ones? And add defaults for missing
        ones?

        """
        section = self._contents.get(section)
        if not section:
            return {}
        return dict(section)
