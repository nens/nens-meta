"""Purpose: read and manage the pyproject.toml config file
"""
import logging
from pathlib import Path

import tomlkit
from tomlkit.items import Table

from nens_meta import utils

FILENAME = "pyproject.toml"

logger = logging.getLogger(__name__)


def pyproject_toml_file(project: Path) -> Path:
    return project / FILENAME


def create_if_missing(project: Path):
    if not pyproject_toml_file(project).exists():
        pyproject_toml_file(project).write_text("# Initially generated by nens-meta\n")
        logger.info("Created empty pyproject.toml")


class PyprojectToml:
    """Wrapper around a project's pyproject.toml"""

    _project: Path
    _config_file: Path
    _contents: tomlkit.TOMLDocument

    def __init__(self, project: Path):
        self._project = project
        self._config_file = pyproject_toml_file(project)
        self._contents = self.read()

    def read(self) -> tomlkit.TOMLDocument:
        return tomlkit.parse(self._config_file.read_text())

    def write(self):
        utils.write_if_changed(self._config_file, tomlkit.dumps(self._contents))

    def get_or_create_section(self, name) -> Table:
        if name not in self._contents:
            self._contents.append(name, tomlkit.table())
            logger.debug(f"Created section {name}")
        section: Table = self._contents[name]  # type: ignore
        return section

    def ensure_build_system(self):
        section = self.get_or_create_section("build-system")
        section.clear()
        section.comment("Section managed by nens-meta")
        section["requires"] = ["setuptools>=69"]
