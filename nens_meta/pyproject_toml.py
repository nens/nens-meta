"""Purpose: read and manage the pyproject.toml config file
"""
import logging
from pathlib import Path

import tomlkit
from tomlkit.items import Table

from nens_meta import utils

FILENAME = "pyproject.toml"

logger = logging.getLogger(__name__)


def pyproject_toml_file(project: Path) -> Path:
    return project / FILENAME


def create_if_missing(project: Path):
    if not pyproject_toml_file(project).exists():
        pyproject_toml_file(project).write_text("# Initially generated by nens-meta\n")
        logger.info("Created empty pyproject.toml")


class PyprojectToml:
    """Wrapper around a project's pyproject.toml"""

    _project: Path
    _config_file: Path
    _contents: tomlkit.TOMLDocument
    _options: dict

    def __init__(self, project: Path, options: dict):
        self._project = project
        self._config_file = pyproject_toml_file(project)
        self._options = options
        self._contents = self.read()

    def read(self) -> tomlkit.TOMLDocument:
        return tomlkit.parse(self._config_file.read_text())

    def write(self):
        target_name = FILENAME
        if self._options.get("leave_alone"):
            logger.warning(f"Leaving {target_name} alone")
            target_name += ".suggestion"
        target = self._project / target_name
        utils.write_if_changed(target, tomlkit.dumps(self._contents))

    def get_or_create_section(self, name) -> Table:
        if name not in self._contents:
            self._contents.append(name, tomlkit.table())
            logger.debug(f"Created section {name}")
        section: Table = self._contents[name]  # type: ignore
        return section

    def update(self):
        """Update the pyproject.toml file

        `options` is the combined contents of the [meta] and [pyprojecttoml] config
        sections.
        """

        self.ensure_build_system()
        self.adjust_project()

    def ensure_build_system(self):
        section = self.get_or_create_section("build-system")
        section.clear()
        section.comment("Whole section managed by nens-meta")
        section["requires"] = ["setuptools>=69"]

    def adjust_project(self):
        section = self.get_or_create_section("project")
        section["name"] = self._options["project_name"]
        section["name"].comment("Set by nens-meta")
        section["dynamic"] = ["version"]
        section["dynamic"].comment("Set by nens-meta")

        suggestions = {
            "requires-python": ">=3.11",
            "dependencies": [],
        }
        for suggestion in suggestions:
            if suggestion not in section:
                section[suggestion] = suggestions[suggestion]
                section[suggestion].comment("Suggested by nens-meta")
